# 1. 首先创建 kubeflow-mini 任务
apiVersion: kubeflow-mini.io/v1
kind: MLJob
metadata:
  name: mnist-pytorch
  namespace: default
spec:
  # 管理信息
  jobId: "mnist-001"
  project: "mnist-demo"
  owner: "xiaoming"
  description: "MNIST数字识别训练任务"
  tags: 
    - "mnist"
    - "pytorch"
    - "demo"
  priority: 80

  # Training配置
  training:
    apiVersion: "kubeflow.org/v1"
    kind: PyTorchJob
    spec:
      pytorchReplicaSpecs:
        Worker:
          replicas: 1
          restartPolicy: OnFailure
          template:
            spec:
              containers:
                - name: pytorch
                  image: pytorch/pytorch:2.1.0-cuda12.1-cudnn8-runtime
                  resources:
                    limits:
                      nvidia.com/gpu: 1
                      cpu: "4"
                      memory: "8Gi"
                    requests:
                      nvidia.com/gpu: 1
                      cpu: "2"
                      memory: "4Gi"
                  command:
                    - "python"
                    - "-c"
                    - |
                      import torch
                      import torch.nn.functional as F
                      from torchvision import datasets, transforms
                      
                      # 准备数据
                      transform = transforms.Compose([
                          transforms.ToTensor(),
                          transforms.Normalize((0.1307,), (0.3081,))
                      ])
                      dataset = datasets.MNIST('./data', train=True, download=True, transform=transform)
                      train_loader = torch.utils.data.DataLoader(dataset, batch_size=64)
                      
                      # 定义简单的CNN模型
                      model = torch.nn.Sequential(
                          torch.nn.Conv2d(1, 32, 3, 1),
                          torch.nn.ReLU(),
                          torch.nn.Conv2d(32, 64, 3, 1),
                          torch.nn.ReLU(),
                          torch.nn.MaxPool2d(2),
                          torch.nn.Dropout(0.25),
                          torch.nn.Flatten(1),
                          torch.nn.Linear(9216, 128),
                          torch.nn.ReLU(),
                          torch.nn.Dropout(0.5),
                          torch.nn.Linear(128, 10),
                          torch.nn.LogSoftmax(dim=1)
                      ).cuda()
                      
                      # 训练模型
                      optimizer = torch.optim.Adadelta(model.parameters())
                      model.train()
                      
                      for epoch in range(1, 10):
                          for batch_idx, (data, target) in enumerate(train_loader):
                              data, target = data.cuda(), target.cuda()
                              optimizer.zero_grad()
                              output = model(data)
                              loss = F.nll_loss(output, target)
                              loss.backward()
                              optimizer.step()
                              
                              if batch_idx % 100 == 0:
                                  print(f'Train Epoch: {epoch} [{batch_idx * len(data)}/{len(train_loader.dataset)} '
                                        f'({100. * batch_idx / len(train_loader):.0f}%)]\tLoss: {loss.item():.6f}') 